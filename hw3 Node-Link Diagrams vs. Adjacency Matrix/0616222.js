(function (d3$1) {
  'use strict';

  const drag = (simulation) => {
    function dragstarted(event) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      event.subject.fx = event.subject.x;
      event.subject.fy = event.subject.y;
    }

    function dragged(event) {
      event.subject.fx = event.x;
      event.subject.fy = event.y;
    }

    function dragended(event) {
      if (!event.active) simulation.alphaTarget(0);
      event.subject.fx = null;
      event.subject.fy = null;
    }

    return d3
      .drag()
      .on('start', dragstarted)
      .on('drag', dragged)
      .on('end', dragended);
  };
  var highlightLink = [];
  var allLinkID = {};
  var color = d3.scaleOrdinal(d3.schemeCategory10);
  const renderFDG = (nodes, links, max) => {
    const svg = d3$1.select('#svg1');
    const width = +svg.attr('width');
    const height = +svg.attr('height');
    const margin = { top: 60, right: 40, bottom: 50, left: 10 };
    const g = svg.append('g')
    .attr('transform', `translate(${margin.left},${margin.top})`);
    g.append('text').text('Node-Link Diagrams vs. Adjacency Matrix')
    	.attr('class', 'left_title')
      .attr('transform','translate(-320,-13)');
    g.append('text').text('Try to:')
    	.attr('class', 'left_title')
      .attr('transform','translate(-320,40)'); 
  	g.append('text').text('1. drag it')
    	.attr('class', 'left_title')
      .attr('transform','translate(-320,93)'); 
  	g.append('text').text('2. scroll up and down')
    	.attr('class', 'left_title')
      .attr('transform','translate(-320,146)'); 
    g.append('text').text('3.click on a node')
    	.attr('class', 'left_title')
      .attr('transform','translate(-320,199)'); 
    const simulation = d3$1.forceSimulation(nodes)
      .force(
        'link',
        d3.forceLink(links).id((d) => d.id)
      )
      .force('charge', d3.forceManyBody())
      .force('center', d3.forceCenter(width / 2, height / 2));
    svg.attr('viewBox', [-350, 700, 1100, 800]);
    const link = g
      .attr('stroke', '#999')
      .selectAll('line')
      .data(links)
      .join('line')
      .attr('stroke-width', (d) => Math.sqrt(d.value))
      .attr('id', (d) => 'L' + d.source.id + 'x' + d.target.id);
    const node = g
      .append('g')
      .attr('stroke', '#635F5D')
      .attr('stroke-width', 1.5)
      .selectAll('circle')
      .data(nodes)
      .join('circle')
      .attr('r', (d) => 5 + d.group*d.group*2)
      .attr('fill', (d) => d3.schemeCategory10[5-d.group])
      .call(drag(simulation))
      .on('click', (datum) => {
        var id = datum.path[0].childNodes[0].__data__.id;
        console.log('#row' + id);
        d3.selectAll('rect')
          .style('stroke-width', '1px')
          .style('stroke', '#C0C0BB');
        highlightLink.forEach((d) => {
          d3.select(d).attr('stroke-width', 1).attr('stroke', '#999');
        });
        highlightLink.length = 0;
        for (var i = 1; i <= max; i++) {
          d3.select('#g' + i + 'x' + id)
            .style('stroke-width', '3px')
            .style('stroke', '#ff0000');
          d3.select('#g' + id + 'x' + i)
            .style('stroke-width', '3px')
            .style('stroke', '#ff0000');
        }
        d3.select('#text1').text(
          'Selected node:' + id + ', row and column has been highlighted.' 
        );
      });

    
    d3.select('svg').call(
      d3
        .zoom()
        .extent([
          [0, 0],
          [450, 600],
        ])
        .scaleExtent([1, 8])
        .on('zoom', zoomFunct)
    );

    function zoomFunct({ transform }) {
      link.attr('transform', transform);
      node.attr('transform', transform);
    }

    node.append('title').text((d) => d.id);

    simulation.on('tick', () => {
      link
        .attr('x1', (d) => d.source.x)
        .attr('y1', (d) => d.source.y)
        .attr('x2', (d) => d.target.x)
        .attr('y2', (d) => d.target.y);
      node.attr('cx', (d) => d.x).attr('cy', (d) => d.y);
    });

    return svg.node();
  };

  const renderAD = (matrix, nodes) => {
    const margin = { top: 40, right: 40, bottom: 50, left: 10 };
    //console.log(matrix);
    const size = 22;
    var svg2 = d3
      .select('#ad')
      .append('svg')
      .attr('width', 9500)
      .attr('height', 9500)
      .append('g')
      .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
    svg2
      .append('text')
    	.attr('class', 'title')
      .attr('y', +20)
      .attr('x', +50)
      .attr('id', 'text1')
      .text('Click on one of the matrix element, the corresponding link will be highlighted.');
    matrix.forEach((m, i) => {
      svg2
        .append('g')
        .attr('transform', 'translate(50,50)')
        .attr('id', 'row' + (i + 1))
        .selectAll('rect')
        .data(m)
        .enter()
        .append('rect')
        .attr('class', 'grid')
        .attr('width', size)
        .attr('height', size)
        .attr('x', (d) => d.x * size)
        .attr('y', (d) => d.y * size)
        .attr('id', (d) => 'g' + (d.x + 1) + 'x' + (d.y + 1))
        .style('fill-opacity', (d) => d.weight * 1)
        .on('click', (datum) => {
          d3.selectAll('rect')
            .style('stroke-width', '1px')
            .style('stroke', '#C0C0BB');
          highlightLink.forEach((d) => {
            d3.select(d).attr('stroke-width', 1).attr('stroke', '#999');
          });
          highlightLink.length = 0;
          d3.select('#' + datum.path[0].id)
            .style('stroke-width', '3px')
            .style('stroke', '#ff0000');
          if (datum.path[0].style['fillOpacity'] == '0') {
            var tmp = datum.path[0].id.replace('g', '');
            tmp = tmp.split('x');
            d3.select('#text1').text(
              'node ' + tmp[0] + ' and node ' + tmp[1] + ' has no relationship!' 
            );
          } else {
            var tmp = datum.path[0].id.replace('g', '');
            tmp = tmp.split('x');
            d3.select('#text1').text(
              'You highlighted the link between node ' +
                tmp[0] +
                ' and node ' +
                tmp[1] +
                ' .'
            );
            if (allLinkID[datum.path[0].id.replace('g', 'L')]) {
              d3.select('#' + datum.path[0].id.replace('g', 'L'))
                .attr('stroke-width', 3)
                .attr('stroke', '#ff0000');
              highlightLink.push('#' + datum.path[0].id.replace('g', 'L'));
            } else {
              d3.select('#L' + tmp[1] + 'x' + tmp[0])
                .attr('stroke-width', 3)
                .attr('stroke', '#ff0000');
              highlightLink.push('#L' + tmp[1] + 'x' + tmp[0]);
            }
          }
        });
    });

    svg2
      .append('g')
      .attr('transform', 'translate(50,47)')
    	.attr('class', 'row_column')
      .selectAll('text')
      .data(nodes)
      .enter()
      .append('text')
      .attr('x', (d, i) => i * size + size / 2)
      .text((d) => d.id)
      .style('text-anchor', 'middle');

    svg2
      .append('g')
      .attr('transform', 'translate(35,56)')
    	.attr('class', 'row_column')
      .selectAll('text')
      .data(nodes)
      .enter()
      .append('text')
      .attr('y', (d, i) => i * size + size / 2)
      .text((d) => d.id)
      .style('text-anchor', 'middle');
  };

  d3$1.csv('https://raw.githubusercontent.com/pychen01/infect-dublin/main/data.tsv').then((data) => {
    var max = 0;
    var min = 9999;
    var links = [];
    var countLinks = [];
    for (var i = 0; i <= 1000; i++) {
      countLinks.push(0);
    }
    var key = Object.keys(data[0])[0];
    links.push({
      source: key.split(' ')[0],
      target: key.split(' ')[1],
      value: 1,
    });
    allLinkID['L' + key.split(' ')[0] + 'x' + key.split(' ')[1]] = 1;
    data.forEach((d) => {
      key = Object.keys(d);
      var tmp = d[Object.keys(d)].split(' ');
      delete d[Object.keys(d)];
      d.source = tmp[0];
      d.target = tmp[1];
      d.value = 1;
      if (parseInt(tmp[0], 10) > max) max = d.source;
      if (parseInt(tmp[1], 10) > max) max = d.target;
      if (parseInt(tmp[0], 10) < min) min = d.source;
      if (parseInt(tmp[1], 10) < min) min = d.target;
      links.push(d);
      allLinkID['L' + d.source + 'x' + d.target] = 1;
      countLinks[parseInt(tmp[0], 10)] += 1;
      countLinks[parseInt(tmp[1], 10)] += 1;
    });
    var nodes = [];
    for (var i = min; i <= max; i++) {
      nodes.push({
        id: String(i),
        group: Math.ceil(countLinks[i] / 10),
      });
    }
    var edgeHash = {};
    links.forEach((d) => {
      var id = d.source + '-' + d.target;
      edgeHash[id] = 1;
      var id = d.target + '-' + d.source;
      edgeHash[id] = 1;
    });

    var matrix = [];
    for (var y = min; y <= max; y++) {
      var row = [];
      for (var x = min; x <= max; x++) {
        var grid = { x: x - 1, y: y - 1, weight: 0 };
        if (edgeHash[y + '-' + x]) {
          grid.weight = 1;
        }
        row.push(grid);
      }
      matrix.push(row);
    }
    //console.log(allLinkID);
    renderFDG(nodes, links, max);
    renderAD(matrix, nodes);
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,